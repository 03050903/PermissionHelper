{
  "name": "Permissionhelper",
  "tagline": "Android Library to help you with your runtime Permissions",
  "body": "# PermissionHelper\r\nAndroid Library to help you with your runtime Permissions.\r\n\r\nDemo \r\n======\r\n\r\n**Android M** <a href=\"https://youtu.be/ypFH4yxjppQ\">Watch it in action.</a>\r\n<br/>\r\n**Pre M** <a href=\"https://www.youtube.com/watch?v=n2dKAu5fR6M\">Watch it in action.</a>\r\nNexus 6 (M)\r\n=======\r\n![Nexus 6](https://raw.github.com/k0shk0sh/PermissionHelper/master/art/nexus6.jpg)\r\n\r\nNexus 7 (L)\r\n=======\r\n![ScreenShot](https://raw.github.com/k0shk0sh/PermissionHelper/master/art/nexus7.jpg)\r\n\r\nNexus 10 (L)\r\n=======\r\n![ScreenShot](https://raw.github.com/k0shk0sh/PermissionHelper/master/art/nexus10.jpg)\r\n\r\n\r\n\r\n# Installation\r\n\r\n#### Gradle\r\n```groovy\r\n    compile 'com.github.k0shk0sh:PermissionHelper:1.0.13'\r\n```\r\n\r\n#### Maven\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.k0shk0sh</groupId>\r\n  <artifactId>PermissionHelper</artifactId>\r\n  <version>1.0.13</version>\r\n  <type>aar</type>\r\n</dependency>\r\n```\r\n\r\nUsage\r\n=====\r\n\r\n# Ask Permissions in Style\r\n\r\n_Have you wondered what will give you a higher chance of letting the user accepts your permission?_\r\n\r\n>The answer is simple: **(Educating UI)** that explains why you need to use that particular `permission`. \r\n\r\n* All you need to do is extending <a href=\"https://github\r\n.com/k0shk0sh/PermissionHelper/blob/master/permission/src/main/java/com/fastaccess/permission/base/activity/BasePermissionActivity\r\n.java\">BasePermissionActivity</a>. \r\n\r\n  * By extending `BasePermissionActivity` you'll have control over (**Features**): \r\n    * Permissions that being asked and their Explanation if its needed.\r\n    * Each `Screen` Background color (`DarkPrimaryColor` of that background will be generated automatically).\r\n    * Each `Screen` Image Resource. \r\n    * Each `Screen` Title & Message.\r\n    * Each `Screen` Title & Message Text Color.\r\n    * Each `Screen` Title & Message Text Size.\r\n    * Each `Screen` Text & Message `FontType`, yes you heard me right, each `Screen` can have their own `FontType`.\r\n    * Each `Screen` Next, Previous & Request Buttons Icon Resources. \r\n    * Your Own `Theme`.\r\n    * Your Own Implementation of `ViewPager.PageTransformer` or use the default one. \r\n    * You can defined for instance that a particular permission can't be skipped until the Explanation `Dialog` is showed.(follow example code below\r\n     to know \r\n    how).\r\n    * `BasePermissionActivity` support Portrait & Landscape modes for both Mobile Phones & Tablets _(as showing in above images)_.\r\n    * `SYSTEM_ALERT_WINDOW Permission`  is being automatically handled if you ever pass it along other permissions ;) . \r\n* And Finally **Let The Library Do The Job For You. in Style.**\r\n\r\n**Notice** \r\n> You still can use the library to explain why you used the permission in your app, the library will never try ask the permission if \r\nAndroid is smaller than **M**, it will just do like any Intro library does. as you can see in **Nexus 7 & Nexus 10** screens running Android **L**, \r\nrequest button is hidden ;). \r\n\r\n> For Better Understanding, please have a look at the example code at <a href=\"https://github.com/k0shk0sh/PermissionHelper/blob/master/app/src/main/java/com/fastaccess/permission/sample/SamplePagerActivity.java\">SamplePagerActivity</a>\r\n\r\n# Take Control.\r\n\r\nYour ```Activity/Presenter```  should implement ```OnPermissionCallback``` which in return will give you access to\r\n\r\n```java\r\n    void onPermissionGranted(String[] permissionName);\r\n\r\n    void onPermissionDeclined(String[] permissionName);\r\n\r\n    void onPermissionPreGranted(String permissionsName);\r\n\r\n    void onPermissionNeedExplanation(String permissionName);  \r\n    \r\n    void onPermissionReallyDeclined(String permissionName);//user has ticked don't show again and deny the permission\r\n\r\n    void onNoPermissionNeeded(); // fallback to api < M\r\n```\r\n\r\nto request a permission all you have to do is:\r\n\r\n```java\r\npermissionHelper\r\n     .setForceAccepting(false)// true if you had like force reshowing the permission dialog on Deny (not recommended)\r\n     .request(isSingle ? SINGLE_PERMISSION : MULTIPLE_PERMISSIONS);\r\n```\r\n\r\nand finally in your `Activity`\r\n```java\r\nonRequestPermissionsResult(....)\r\n``` \r\ncall \r\n```java\r\npermissionHelper.onRequestPermissionsResult(....)\r\n```\r\n\r\n# Extra\r\n\r\n```java\r\npublic static String declinedPermission(@NonNull Context context, @NonNull String[])\r\n```\r\n\r\n```java\r\npublic static String[] declinedPermissions(@NonNull Context context, @NonNull String[] permissions)\r\n```\r\n\r\n```java\r\npublic static boolean isPermissionGranted(@NonNull Context context, @NonNull String permission)\r\n```\r\n\r\n```java\r\npublic static boolean isPermissionDeclined(@NonNull Context context, @NonNull String permission)\r\n```\r\n\r\n```java\r\npublic static boolean isExplanationNeeded(@NonNull Activity context, @NonNull String permissionName)\r\n```\r\n\r\n\r\n```java\r\npublic static boolean permissionExists(@NonNull Context context, @NonNull String permissionName)\r\n```\r\n\r\n```java\r\npublic static boolean isPermissionPermanentlyDenied(@NonNull Activity context, @NonNull String permission)\r\n```\r\n\r\n```java\r\npublic static void openSettingsScreen(Context context)//useful when we can't request for the permission due to user ticked don't show again.\r\n```\r\n\r\n```java\r\n@TargetApi(Build.VERSION_CODES.M)\r\npublic static boolean isSystemAlertGranted(@NonNull Context context)// special case for SYSTEM_ALERT_WINDOW permission.\r\n```\r\n\r\n```java\r\npublic void requestAfterExplanation(String permissionName)// to be used if the permission needs explanation\r\n```\r\n\r\n```java\r\npublic void requestAfterExplanation(String[] permissions)//to be used if the permission needs explanation\r\n```\r\n\r\n```java\r\npublic void requestSystemAlertPermission() // not really needed as request(...) will handle this case.\r\n```\r\n\r\n```java\r\n> all of the above static methods you can still access them with PermissionHelper instance.\r\n```\r\n\r\n\r\n\r\n> **To understand more how taking control would look like please go through the <a href=\"https://github\r\n.com/k0shk0sh/PermissionHelper/tree/master/app/src/main/java/com/fastaccess/permission/sample/SampleActivity.java\">sample \r\napp</a>**\r\n\r\n# Why this library?\r\n\r\n* Its simple to use.\r\n* Its Unique, Customizable & read back first point. \r\n* You have two choices, do it your way through `callbacks`, or let the `Library` do it for you with your look & Feel.\r\n* Minimum API is 14, but it'll probably work in API 11 and above, just make sure you test it out.  \r\n\r\n\r\n# Dependency\r\n\r\nAndroid Support library ```v24.0.2``\r\n\r\nCirclePageIndicator by **JakeWharton** (integrated within the library).\r\n\r\n# Images\r\n\r\nImages used inside the demo are by <a href=\"http://www.materialup.com/maxKeppeler\">Maximilian Keppeler</a>\r\n\r\n# Copyright Notice\r\n\r\nCopyright (C) 2015 Kosh.\r\nLicensed under the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\nlicense (see the LICENSE file).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}